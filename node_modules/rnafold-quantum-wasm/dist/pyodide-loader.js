"use strict";
/**
 * Pyodide Loader - Manages loading and initialization of Pyodide
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PyodideLoader = void 0;
exports.getPyodideLoader = getPyodideLoader;
const pyodide_1 = require("pyodide");
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
class PyodideLoader {
    constructor() {
        this.pyodide = null;
        this.initialized = false;
        this.initializationPromise = null;
    }
    /**
     * Initialize Pyodide and load the Python modules
     */
    initialize() {
        return __awaiter(this, void 0, void 0, function* () {
            // If already initialized, return immediately
            if (this.initialized) {
                return;
            }
            // If initialization is in progress, wait for it
            if (this.initializationPromise) {
                return this.initializationPromise;
            }
            // Start initialization
            this.initializationPromise = this._doInitialize();
            yield this.initializationPromise;
        });
    }
    _doInitialize() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                console.log('Loading Pyodide...');
                // Detect environment and use appropriate loading strategy
                const isNode = typeof process !== 'undefined' && process.versions && process.versions.node;
                if (isNode) {
                    // Node.js environment - load from node_modules
                    this.pyodide = yield (0, pyodide_1.loadPyodide)();
                }
                else {
                    // Browser environment - load from CDN
                    this.pyodide = yield (0, pyodide_1.loadPyodide)({
                        indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.26.4/full/',
                    });
                }
                console.log('Pyodide loaded successfully');
                // Load the Python module
                yield this.loadPythonModule();
                this.initialized = true;
                console.log('Pyodide initialization complete');
            }
            catch (error) {
                console.error('Failed to initialize Pyodide:', error);
                throw new Error(`Pyodide initialization failed: ${error}`);
            }
        });
    }
    /**
     * Load the Python RNA folding module
     */
    loadPythonModule() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.pyodide) {
                throw new Error('Pyodide not initialized');
            }
            try {
                // Read the Python module file
                const pythonModulePath = path.join(__dirname, 'python-modules', 'rna_folding_simplified.py');
                let pythonCode;
                // Try to read from file system (Node.js)
                try {
                    pythonCode = fs.readFileSync(pythonModulePath, 'utf-8');
                }
                catch (e) {
                    // If running in browser or file not found, use embedded code
                    pythonCode = this.getEmbeddedPythonCode();
                }
                // Run the Python code
                yield this.pyodide.runPythonAsync(pythonCode);
                console.log('Python module loaded successfully');
            }
            catch (error) {
                console.error('Failed to load Python module:', error);
                throw new Error(`Failed to load Python module: ${error}`);
            }
        });
    }
    /**
     * Get embedded Python code (for browser environments)
     */
    getEmbeddedPythonCode() {
        // This will be replaced by a build script or can be embedded directly
        // For now, we'll read it from the file system
        // In a production build, this would be bundled
        throw new Error('Browser environment not yet supported. Please use Node.js environment.');
    }
    /**
     * Run Python code
     */
    runPython(code) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initialize();
            if (!this.pyodide) {
                throw new Error('Pyodide not initialized');
            }
            return yield this.pyodide.runPythonAsync(code);
        });
    }
    /**
     * Call a Python function
     */
    callPythonFunction(functionName, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.initialize();
            if (!this.pyodide) {
                throw new Error('Pyodide not initialized');
            }
            // Convert arguments to Python
            const pythonArgs = args.map(arg => JSON.stringify(arg)).join(', ');
            // Call the function and get result
            const result = yield this.pyodide.runPythonAsync(`
import json
result = ${functionName}(${pythonArgs})
result
        `);
            return result;
        });
    }
    /**
     * Get the Pyodide instance
     */
    getPyodide() {
        return this.pyodide;
    }
    /**
     * Check if Pyodide is initialized
     */
    isInitialized() {
        return this.initialized;
    }
}
exports.PyodideLoader = PyodideLoader;
// Singleton instance
let pyodideLoader = null;
/**
 * Get the singleton PyodideLoader instance
 */
function getPyodideLoader() {
    if (!pyodideLoader) {
        pyodideLoader = new PyodideLoader();
    }
    return pyodideLoader;
}
