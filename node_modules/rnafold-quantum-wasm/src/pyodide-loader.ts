/**
 * Pyodide Loader - Manages loading and initialization of Pyodide
 */

import { loadPyodide, PyodideInterface } from 'pyodide';
import * as fs from 'fs';
import * as path from 'path';

export class PyodideLoader {
    private pyodide: PyodideInterface | null = null;
    private initialized: boolean = false;
    private initializationPromise: Promise<void> | null = null;

    /**
     * Initialize Pyodide and load the Python modules
     */
    async initialize(): Promise<void> {
        // If already initialized, return immediately
        if (this.initialized) {
            return;
        }

        // If initialization is in progress, wait for it
        if (this.initializationPromise) {
            return this.initializationPromise;
        }

        // Start initialization
        this.initializationPromise = this._doInitialize();
        await this.initializationPromise;
    }

    private async _doInitialize(): Promise<void> {
        try {
            console.log('Loading Pyodide...');

            // Detect environment and use appropriate loading strategy
            const isNode = typeof process !== 'undefined' && process.versions && process.versions.node;

            if (isNode) {
                // Node.js environment - load from node_modules
                this.pyodide = await loadPyodide();
            } else {
                // Browser environment - load from CDN
                this.pyodide = await loadPyodide({
                    indexURL: 'https://cdn.jsdelivr.net/pyodide/v0.26.4/full/',
                });
            }

            console.log('Pyodide loaded successfully');

            // Load the Python module
            await this.loadPythonModule();

            this.initialized = true;
            console.log('Pyodide initialization complete');
        } catch (error) {
            console.error('Failed to initialize Pyodide:', error);
            throw new Error(`Pyodide initialization failed: ${error}`);
        }
    }

    /**
     * Load the Python RNA folding module
     */
    private async loadPythonModule(): Promise<void> {
        if (!this.pyodide) {
            throw new Error('Pyodide not initialized');
        }

        try {
            // Read the Python module file
            const pythonModulePath = path.join(__dirname, 'python-modules', 'rna_folding_simplified.py');

            let pythonCode: string;

            // Try to read from file system (Node.js)
            try {
                pythonCode = fs.readFileSync(pythonModulePath, 'utf-8');
            } catch (e) {
                // If running in browser or file not found, use embedded code
                pythonCode = this.getEmbeddedPythonCode();
            }

            // Run the Python code
            await this.pyodide.runPythonAsync(pythonCode);

            console.log('Python module loaded successfully');
        } catch (error) {
            console.error('Failed to load Python module:', error);
            throw new Error(`Failed to load Python module: ${error}`);
        }
    }

    /**
     * Get embedded Python code (for browser environments)
     */
    private getEmbeddedPythonCode(): string {
        // This will be replaced by a build script or can be embedded directly
        // For now, we'll read it from the file system
        // In a production build, this would be bundled
        throw new Error('Browser environment not yet supported. Please use Node.js environment.');
    }

    /**
     * Run Python code
     */
    async runPython(code: string): Promise<any> {
        await this.initialize();

        if (!this.pyodide) {
            throw new Error('Pyodide not initialized');
        }

        return await this.pyodide.runPythonAsync(code);
    }

    /**
     * Call a Python function
     */
    async callPythonFunction(functionName: string, ...args: any[]): Promise<any> {
        await this.initialize();

        if (!this.pyodide) {
            throw new Error('Pyodide not initialized');
        }

        // Convert arguments to Python
        const pythonArgs = args.map(arg => JSON.stringify(arg)).join(', ');

        // Call the function and get result
        const result = await this.pyodide.runPythonAsync(`
import json
result = ${functionName}(${pythonArgs})
result
        `);

        return result;
    }

    /**
     * Get the Pyodide instance
     */
    getPyodide(): PyodideInterface | null {
        return this.pyodide;
    }

    /**
     * Check if Pyodide is initialized
     */
    isInitialized(): boolean {
        return this.initialized;
    }
}

// Singleton instance
let pyodideLoader: PyodideLoader | null = null;

/**
 * Get the singleton PyodideLoader instance
 */
export function getPyodideLoader(): PyodideLoader {
    if (!pyodideLoader) {
        pyodideLoader = new PyodideLoader();
    }
    return pyodideLoader;
}
