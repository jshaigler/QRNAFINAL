/**
 * Basic Usage Example for RNA Fold Quantum Client
 *
 * This example demonstrates how to use the standalone RNA folding client
 * with WebAssembly (no server required).
 */

import { RnaFoldQuantumClient } from '../src/index';

async function main() {
    console.log('='.repeat(70));
    console.log('RNA Fold Quantum Client - Basic Usage Example');
    console.log('='.repeat(70));

    // Create client (WebAssembly mode is default)
    const client = new RnaFoldQuantumClient();

    try {
        // Initialize the client (loads Pyodide)
        console.log('\n1. Initializing client (loading WebAssembly)...');
        await client.initialize();
        console.log('   ✓ Client initialized');

        // Example 1: Predict structure for a single sequence
        console.log('\n2. Predicting structure for a single RNA sequence...');
        const sequence = 'GGGAAACCCUUUGGGAAACCC';
        const structure = await client.predictStructure(sequence);
        console.log(`   Sequence:  ${structure.sequence}`);
        console.log(`   Structure: ${structure.structure}`);
        console.log(`   MFE:       ${structure.mfe.toFixed(2)} kcal/mol`);
        console.log(`   Base pairs: ${structure.base_pairs}`);

        // Example 2: Generate multiple candidates
        console.log('\n3. Generating RNA candidates with quantum-inspired sampling...');
        const candidates = await client.generateCandidates(30, 5);
        console.log(`   Generated ${candidates.length} candidates:`);

        candidates.forEach((c, i) => {
            console.log(`\n   Candidate ${i + 1}: ${c.id}`);
            console.log(`      Sequence:  ${c.sequence}`);
            console.log(`      Structure: ${c.structure}`);
            console.log(`      Stability: ${c.stability_score.toFixed(2)}`);
            console.log(`      MFE:       ${c.mfe.toFixed(2)} kcal/mol`);
        });

        // Example 3: Run full pipeline
        console.log('\n4. Running full quantum RNA pipeline...');
        const result = await client.runPipeline({
            targetName: 'Test Target',
            disease: 'Test Disease',
            sequenceLength: 40,
            numCandidates: 10
        });

        console.log(`   ✓ Pipeline completed successfully!`);
        console.log(`   Target: ${result.target_name}`);
        console.log(`   Disease: ${result.disease}`);
        console.log(`   Total leads: ${result.num_leads}`);
        console.log(`   Average stability: ${result.metrics.avg_stability.toFixed(2)}`);
        console.log(`   Average MFE: ${result.metrics.avg_mfe.toFixed(2)} kcal/mol`);

        console.log('\n   Top 3 leads:');
        result.leads.slice(0, 3).forEach((lead, i) => {
            console.log(`\n   ${i + 1}. ${lead.id}`);
            console.log(`      Sequence:  ${lead.sequence}`);
            console.log(`      Structure: ${lead.structure}`);
            console.log(`      Stability: ${lead.stability_score.toFixed(2)}`);
            console.log(`      Method:    ${lead.generation_method}`);
        });

        console.log('\n' + '='.repeat(70));
        console.log('✓ All examples completed successfully!');
        console.log('='.repeat(70));

    } catch (error) {
        console.error('\n❌ Error:', error);
        process.exit(1);
    }
}

// Run the example
main().catch(console.error);
